imageCow PHP library (version 0.4)

It's a php library to manipulate images to web. It's based in the image library of phpCan framework (http://idc.anavallasuiza.com)

- Written in PHP 5.3
- Use GD2 or Imagick libraries (and can be extended with more)
- Has optional client-side resources to generate responsive images
- Very simple and easy to use.


HOW USE IT?

----------------------------------

* Create an instance of Imagecow\Libs\Gd or Imagecow\Libs\Imagick (it depends of the library you choose) class:

$GDimage = new Imagecow\Libs\Gd();

----------------------------------

* You can use also the static function Imagecow\Image::create() to returns an instance:

use Imagecow\Image;

$MyImagickImage = Image::create('Imagick'); //Returns an instance using the Imagick library

$MyImage = Image::create(); //Detects automatically the library to use (in order of preference: Imagick, GD2)

----------------------------------

* Load an image file:

$MyImage->load('picture.jpg');

----------------------------------

* Crop the image:

$Image->crop(200, 300); //Crops the image to 200x300px
$Image->crop(200, 300, 'left', 'top'); //Crops the image to 200x300px starting from left-top
$Image->crop(200, 300, 20, '50%'); //Crops the image to 200x300px starting from 20px (x) / 50% (y)
$Image->crop(50%, 50%); //Crops the image to half size

----------------------------------

* Resize the image

$Image->resize(200, 300); //Resizes the image to max size 200x300px (keeps the aspect ratio. If the image is lower, don't resize it)

$Image->resize(800, 600, 1); //Resizes the image to max size 800x600px (keeps the aspect ratio. If the image is lower enlarge it)

$Image->resize(800); //Resizes the image to 800px width and calculates the height maintaining the proportion.

----------------------------------

* Resize and Crop the image

$Image->resizeCrop(200, 300); //Resizes and crops the image to this size.

----------------------------------

* Convert the image to other formats:

$Image->convert('png');

----------------------------------

* Save the image to a file

$image->save('my-new-image.png');

----------------------------------

* Execute multiple functions (resize, crop, resizeCrop, convert)

$image->transform('resize,200,300|convert,png');

//This is useful to get transformed image dinamically using get variables: image.php?transform=resize,200,300|convert,png

----------------------------------

* Show the image

$image->show();

----------------------------------

* Other functions:

$image->getWidth();
$image->getHeight();
$image->getMimeType();

$image->toString(); //Returns the image in a string

$image->get(); //Returns the image resource (GD) or Imagik instance
$image->set(); //Sets manually a new image resource or Imagik instance

$image->setError('message'); //Sets an error manually
$image->getError(); //Returns an ImageException object in case of error
$image->getImageError(); //Returns an Imagecow instance of an image with the error printed

----------------------------------



RESPONSIVE IMAGES

----------------------------------

* Include the imageCow.js library in the html page and execute the function imageCow.init();

<script src="imageCow.js" type="text/javascript" charset="utf-8"></script>

<script type="text/javascript">
	imageCow.init();
</script>

----------------------------------

* This function saves a cookie with the client information (width, height, connection speed).
You can configurate the cookie. The default values are:

imageCow.cookie_seconds = 3600*24;
imageCow.cookie_name = 'imageCow_detection';
imageCow.cookie_path = '/';

----------------------------------

* In the server-side, use the cookie to generate the responsive operations:

$Image = Imagecow\Image::create();

$Image->load($_GET['img']);

$operations = $myImage->getResponsiveOperations($_COOKIE['imageCow_detection'], $_GET['transform']);

$myImage->transform($operations)->show();

----------------------------------

* Now you can transform the image according with the client dimmensions. The available options are:

max-width, min-width, max-height, min-height, width, height

You can use the same syntax than transform, but separate the "media-query" with ";".

img.php?img=my_picture.png&transform=resizeCrop,800,600;max-width=400:resize,400

Get me the image "my_picture.png" with resizeCrop to 800x600. If the max-width of the client side is 400, resize to 400.